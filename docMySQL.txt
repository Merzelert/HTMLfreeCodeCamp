iniciar mySQL
/usr/local/mysql/bin/mysql -u root -p 
password

https://github.com/codigofacilito/curso_base_de_datos


https://devhints.io/mysql


Crear base de datos: CREATE DATABASE;
Mostrar base de datos: SHOW DATABASES;
Eliminar base de datos: DROP DATABASE nombreDeLaBase;

Usar base de datos: USE nombreDeLaBase; con este comando estaremos trabajando con la nombreDeLaBase

Tipos de datos
En general, la mayor√≠a de los servidores de base de datos nos permiten almacenar los mismo tipo de datos, como strings, fechas y n√∫mero.

En este post, listamos los tipos de datos que m√°s utilizar√°s en tu d√≠a a d√≠a.

ALFANUM√âRICOS
CHAR
VARCHAR
En ambos casos nosotros debemos de especificar la longitud m√°xima que podr√° almacenar el campo. Opcionalmente podemos definir el charset que almacenar√°.

varchar(20) character set utf8

Con MySQL nosotros podemos establecer el charset que usar√° la base de datos desde su creaci√≥n create database nombre character set utf8;

N√öMEROS ENTEROS
Tipo	Rango
Tinyint	-128 a 127
Smallint	-32,768 a 32,767
Mediumint	‚àí8,388,608 a 8,388,607
Int	‚àí2,147,483,648 a 2,147,483,647
Bigint	‚àí9,223,372,036,854,775,808 a 9,223,372,036,854,775,807
N√öMEROS FLOTANTES
Para los flotantes encontraremos dos tipos

Float
Double
En ambos casos nosotros debemos de especificar la cantidad de d√≠gitos que almacenar√° la columna antes y despu√©s del punto (p,s)

precio FLOAT(3, 2)
En este caso la columna podr√° almacenar hasta tres d√≠gitos como enteros y dos despu√©s del punto decimal.

Ejemplo 999.99

TIEMPO
Tipo	Formato default
Date	YYYY-MM-DD
Datetime	YYYY-MM-DD HH:MI:SS
Timestamp	YYYY-MM-DD HH:MI:SS
Time	HHH:MI:SS

SHOW TABLES; con este comando podemos ver la tabla de datos 

SELECT DATABASE(); con este comando podemos ver en que base de datos estamos trabajando 

DROP TABLE nombreDeLaTabla; con este comando eliminamos la tabla

SHOW COLUMNS FROM nombreDeLaTabla; con este comando podemos ver las columnas

DESC nombreDeLaTabla; con este comando podemos ver las columnas de una forma abreviada

CREATE TABLE nombreNuevaTabla LIKE nombreDeLaTablaDeLaCualNosQueremosBasar;

SELECT * FROM nombreDeLaTabla; visualizar registros 

/usr/local/mysql/bin/mysql -u root -p libreria_cf -e "SELECT * FROM autores" /*Con este comando podemos entrar directamente a la base de datos con su respectivo nombre*/

SOURCE Downloads/HTMLfree/sentencias_parte2.sql; despues de iniciar sesion se puede acceder a con este comando al archivo directamente 




Implementaci√≥n de restricciones
VALORES √öNICOS
Como sabemos, si nosotros necesitamos validar valores √∫nicos usaremos el constraint UNIQUE.

CREATE TABLE usuarios( 
  usuario_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(50) UNIQUE
);
Otra forma de expresarlo, es de la siguiente manera.

CREATE TABLE usuarios( 
  usuario_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(50),
  CONSTRAINT UNIQUE (nombre)
);
La palabra CONSTRAINT es opcional, sin embargo, por temas de legibilidad recomiendo colocarla.

VALORES M√öTIPLES COLUMNAS
Si necesitamos validar el valor √∫nico de una combinaci√≥n de columnas lo haremos de la siguiente manera.

En este caso queremos validar que la combinaci√≥n de nombre, apellido y matricula sean unicas en la tabla.

CREATE TABLE usuarios( 
  usuario_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  nombre VARCHAR(50),
  apellido VARCHAR(50),
  matricula VARCHAR(10),
  CONSTRAINT unique_combinacion UNIQUE (nombre, apellido, matricula),
  PRIMARY KEY (usuario_id)
);
LLAVES PRIMARIAS
Existen un par de formas con las cuales nosotros podemos definir un campo como una llave primaria.

CREATE TABLE usuarios( 
  usuario_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT
);
o

CREATE TABLE usuarios( 
  usuario_id INT UNSIGNED AUTO_INCREMENT,
  PRIMARY KEY(usuario_id)
);
En ambos casos el resultado es el mismo.






Modificar tablas
Nosotros podemos modificar la definici√≥n de una tabla una vez esta se haya creado, para ello, nos apoyaremos de la sentencia ALTER TABLE.

Aqu√≠ un listado de algunas modificaciones que podemos realizar (Las m√°s comunes).

Renombrar tabla.

Renombrar la tabla usuarios por users.

ALTER TABLE usuarios RENAME users;
Agregar una nueva columna.

Agregar a la tabla usuarios, la columna email de tipo VARCHAR con m√°ximo de 50 caracteres.

ALTER TABLE usuarios ADD email VARCHAR(50);
Agregar una nueva columna con constraints.

Agregar a la tabla usuarios, la columna email, validando su presencia.

ALTER TABLE usuarios ADD email VARCHAR(50) NOT NULL DEFAULT '';
Agregar a la tabla usuarios, la columna email, validando su valor √∫nico.

ALTER TABLE tabla ADD columna VARCHAR(50) UNIQUE;
Eliminar una columna

Eliminar la columna email de la tabla usuarios.

ALTER TABLE usuarios DROP COLUMN email;
Modificar el tipo de dato de una columna

Modificar el tipo de dato de la columna tel√©fono, (tabla usuarios) de INT a VARCHAR, m√°ximo 50 caracteres.

ALTER TABLE usuarios MODIFY telefono VARCHAR(50);
Generar una llave primaria.

Generar una llave primaria a la tabla usuarios.

ALTER TABLE usuarios ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (id);
Agregar llave for√°nea.

Agregar una llave foranea a la tabla usuarios, con referencia a la tabla grupos.

ALTER TABLE usuarios ADD FOREIGN KEY(grupo_id) REFERENCES grupos(grupo_id);
Eliminar llaves for√°neas

Eliminar la llave foranea grupo_id de la tabla usuarios.

ALTER TABLE usuarios DROP FOREIGN KEY grupo_id;



SELECT * FROM nombreDeLaTabla\G; Obtener formato de carta 

SELECT columna, columna FROM nombreDeLaTabla; Obtener solo las columnas que le indicamos

SELECT * FROM nombreDeLaTabla WHERE nombreDeLaTabla = 'algun nombre'; filtro buscando 'algun nombre'

SELECT columnas FROM nombreDeLaTabla WHERE condicion; filtros/condiciones 

Operadores logicos 

SELECT columnas FROM nombreDeLaTabla WHERE condicion AND condicion; condiciones (nombreDeLaTabla = 'algun nombre')

SELECT columnas FROM nombreDeLaTabla WHERE condicion OR condicion; condiciones (nombreDeLaTabla = 'algun nombre')

SELECT columnas FROM nombreDeLaTabla WHERE condicion NOT condicion; condiciones (nombreDeLaTabla = 'algun nombre')

SELECT columnas, columnas... FROM nombreDeLaTabla WHERE columna BETWEEN 'condiciones' AND 'condiciones'; filtro entre dos condiciones 

SELECT*FROM libros WHERE titulo="Ojos de fuego" OR
                           titulo="Cujo" OR 
                           titulo="El hobbit" OR
                           titulo="La torre oscura7 La torre oscura";

busqueda de varios titulos.

SELECT * FROM libros WHERE titulo IN (); entre parentesis agregamos todo lo que queremos buscar separado con comillas y entre ''.

Ejemplo
SELECT * FROM Libros WHERE titulo IN ('Ojos de fuego', 'Cujo', 'El hobbit', 'La torre oscura 7 La torre oscura');

UPDATE table1 SET field1=new_value1 WHERE condition; para actualizar tablas 

Ejemplo
UPDATE libros SET paginas=100 WHERE libro_id=2; cambiamos las paginas de NULL a 100 en el libro_id = 2

DELETE FROM table1 WHERE condition; para eliminar registros de la tabla 

TRUNCATE table1; para eliminar toda la tabla


Motores de almacenamiento en MySQL
Afortunadamente para nosotros, los administradores de base de datos, MySQL nos permite trabajar con diferentes motores de almacenamiento, entre los que destacan MyISAM e InnoDB.

¬øMotor de almacenamiento?, ¬øQu√© es eso? ü§î, ver√°s, un motor de almacenamiento se el encargado de almacenar, gestionar y recuperar toda la informaci√≥n de una tabla. Es por ello que es de suma importancia que nosotros conozcamos la existencia de estos motores, cuales son sus principales diferencias y en qu√© casos es bueno utilizar uno u otro, de esta forma que podamos garantizar un mejor performance en nuestras aplicaciones. üòâ

Para que nosotros conozcamos que motor de almacenamiento podemos utilizar basta con ejecutar la siguiente sentencia en nuestra terminal.

SHOW ENGINES;
Obtendremos el siguiente listado.

InnoDB
MRG_MYISAM
MEMORY
BLACKHOLE
MyISAM
CSV
ARCHIVE
PERFORMANCE_SCHEMA
FEDERATED
En esta ocasi√≥n nos centraremos en explicar los dos motores de almacenamiento m√°s populares, me refiero a MyISAM e InnoDB.

MyISAM es el motor por default de MySQL. Una de las principales ventajas de este motor es la velocidad al momento de recuperar informaci√≥n. MyISAM es una excelente opci√≥n cuando las sentencias predominantes en nuestra aplicaci√≥n sean de consultas. Esta es una de las razones por las cuales MyISAM es tan popular en aplicaciones web.

Si tu aplicaci√≥n necesita realizar b√∫squedas full-text MyISAM es un mejor opcion.

La principal desventajas de MyISAM recae en la ausencia de atomocidad, ya que no se comprueba la integridad referencial de los datos. Se gana tiempo en la inserci√≥n, s√≠, pero perdemos confiabilidad en los datos.

Por otro lado tenemos el motor de almacenamiento InnoDB. La principal ventaja de este motor recae en la seguridad de las operaciones. InnoDB permite la ejecuci√≥n de transacciones, esto nos garantiza que los datos se persisten de forma correcta y si existe alg√∫n error podamos revertir todos los cambios realizados.

Algo interesante a mencionar sobre InnoDB es que este motor realiza un bloqueo total sobre un tabla cuando es ejecutada una se las siguientes sentencias.

Select
Insert
Update
Delete
Si deseamos trabajar con transacci√≥n y la integridad de los datos sea crucial nuestra mejor opci√≥n ser√° InnoDB, por otro lado, s√≠ lo que deseamos es una mayor rapidez al momento de obtener informaci√≥n ser√° necesario utilizar MyISAM.

GESTI√ìN
Si nosotros as√≠ lo deseamos podemos cambiar el motor de almacenamiento. Existen dos formas de hacer esto. La primera, es modificar el archivo my.cnf.

[mysqld]
default-storage-engine = innodb
La segunda forma es hacerlo directamente desde nuestra secci√≥n, basta con ejecutar la siguiente sentencia.

SET storage_engine=INNODB;
En ambos casos modificamos el motor de almacenamiento de MyISAM a InnoDB.

Si nosotros deseamos conocer qu√© motor de almacenamiento utiliza una tabla en particular, podemos hacerlo ejecutando la siguiente sentencia.

SHOW TABLE STATUS WHERE `Name` = 'tabla' \G;
Si deseamos crear una tabla utilizando un motor en particular, debemos seguir la siguiente estructura.

CREATE TABLE tabla_innodb (id int, value int) ENGINE=INNODB;
CREATE TABLE tabla_myisam (id int, value int) ENGINE=MYISAM;
CREATE TABLE tabla_default (id int, value int);





Eventos MySQL
A partir de la versi√≥n 5.1, MySQL a√±ade el concepto de eventos. Un evento no es m√°s que una tarea la cual se ejecuta de forma autom√°tica en un momento previamente programado. Si eres un usuarios Linux puedes ver a los eventos c√≥mo los cron jobs .

Los eventos nos permitir√°n a nosotros c√≥mo administradores de base de datos programar ciertas tareas las cuales queremos que se ejecuten de forma peri√≥dica o en un momento en concreto, de tal manera que podamos automatizar ciertos procesos.

source: imgur.com

EJEMPLOS
Para este tutorial me apoyar√© de mi tabla test.

CREATE TABLE test(
 evento VARCHAR(50),
 fecha DATETIME 
); 
Lo primero que debemos de hacer es habilitar nuestro servidor para que pueda ejecutar eventos.

SET GLOBAL event_scheduler = ON;
Posteriormente creamos nuestro evento; En mi caso, tendr√° el nombre de insertion event. Este evento se ejecutar√° dentro de 1 min, y lo que har√°, ser√° insertar un registro en mi tabla.

CREATE EVENT insertion_event
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 MINUTE
DO INSERT INTO test VALUES ('Evento 1', NOW());
El nombre del evento no debe de poseer m√°s de 64 caracteres.

Si queremos que el evento se ejecute en una fecha en concreto, √∫nicamente debemos de especificarlo en ON SCHEDULE AT. Recuerda, el formato es a√±o-mes-d√≠a hora:minuto:segundo.

ON SCHEDULE AT '2018-12-31 12:00:00'
Si nuestro evento ejecutar√° m√°s de una sentencia SQL debemos de apoyarnos de BEGIN y END.

DELIMITER //

CREATE EVENT insertion_event
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 MINUTE
DO
BEGIN
 INSERT INTO test VALUES ('Evento 1', NOW());
 INSERT INTO test VALUES ('Evento 2', NOW());
 INSERT INTO test VALUES ('Evento 3', NOW());
END //

DELIMITER ;
Una vez el evento se haya creado, nosotros podemos listarlo.

SHOW events\G;
Si queremos eliminar un evento haremos uso de DROP.

DROP EVENT nombre_evento;
Es importante mencionar que una vez el evento haya expirado, este, ser√° eliminado de forma autom√°tica. Si nosotros no queremos que esto ocurra debemos de apoyarnos de ON COMPLETION

ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 MINUTE
ON COMPLETION PRESERVE
...
Algo com√∫n con los eventos es trabajar con store procedures.

CREATE EVENT nombre_evento
ON SCHEDULE AT 'fecha de ejeuci√≥n' 
DO
CALL store_procedure();
EVENTOS PERI√ìDICOS.
Los eventos los podemos programar para que se ejecuten de forma peri√≥dica.

CREATE EVENT insertion_event
ON SCHEDULE EVERY 1 MINUTE STARTS '2018-07-07 18:30:00'
DO INSERT INTO test VALUES ('Evento 1', NOW());
En esta ocasi√≥n, el evento se ejecuta cada minuto despu√©s de las 6:30 PM. Podemos programar la ejecuci√≥n para cada segundo, minuto, hora, semana, mes o a√±o.

Si nosotros queremos que el evento se ejecute entre un rango de fechas debemos de apoyarnos de ENDS.

CREATE EVENT insertion_event
ON SCHEDULE EVERY 1 MINUTE STARTS '2018-07-07 18:30:00'
ENDS '2018-07-07 19:00:00'
DO INSERT INTO test VALUES ('Evento 1', NOW());
Ahora, el evento se ejecuta durante un periodo de 30 minutos (De 6:30 PM a 7:00 PM).

EDITAR EVENTOS
Si por alguna raz√≥n necesitamos detener un evento, lo que debemos de hacer es deshabilitarlo.

ALTER EVENT nombre_evento
DISABLE;
Para habilitar nuevamente un evento colocamos ENABLE.

ALTER EVENT nombre_evento
ENABLE;
DETENER EVENTOS
Para detener completamente todos los eventos, debemos de ejecutar la siguiente sentencia.

SET GLOBAL event_scheduler = OFF;
ESTRUCTURA DE UN EVENTO
Los eventos en MySQL pueden ser tan complejos como nosotros los deseemos.

CREATE
    [DEFINER = { user | CURRENT_USER }]
    EVENT
    [IF NOT EXISTS]
    event_name
    ON SCHEDULE schedule
    [ON COMPLETION [NOT] PRESERVE]
    [ENABLE | DISABLE | DISABLE ON SLAVE]
    [COMMENT 'string']
    DO event_body;

schedule:
    AT timestamp [+ INTERVAL interval] ...
  | EVERY interval
    [STARTS timestamp [+ INTERVAL interval] ...]
    [ENDS timestamp [+ INTERVAL interval] ...]

interval:
    quantity {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |
              WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |
              DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}



Cursores MySQL
En base de datos un Cursor es un mecanismo el cual nos permite procesar fila por fila el resultado de una consulta.

Como sabemos SQL es un lenguaje orientado a conjuntos. Si nosotros deseamos alterar ciertos elementos en nuestra colecci√≥n tendremos que hacerlo mediante condicione. √önica y exclusivamente los elementos que cumpla con dichas condiciones podr√°n ser alterados. Con los cursores podremos trabajar con cada uno de los elementos (filas) de nuestra consulta sin tener que obtener nuevos conjuntos. Esto nos permitir√° ser mucho m√°s flexibles al momento de manipular la informaci√≥n.

Para nosotros poder hacer uso de un cursor ser√° necesario seguir los siguientes pasos.

Crear un cursor a partir de una sentencia SQL.
Apertura del cursor.
Acceso a datos.
Cierre del cursor.
Es importante mencionar que en MySQL los cursores solo podr√°n ser utilizados dentro de stored procedures.

Veamos un ejemplo.

1.-Crear un stored procedure el cual incremente en 10 el n√∫mero de p√°ginas de cada libro (tabla libros). En consola debemos visualizar el t√≠tulo, el anterior n√∫mero de p√°ginas y el actual n√∫mero de p√°ginas de cada libro.

Bien, este ejemplo nos permitir√° comprender de una mejor manera el uso de cursores.

Veamos como pudiese quedar nuestro stored procedure.

DELIMITER //

DROP PROCEDURE IF EXISTS facilito_procedure//
CREATE PROCEDURE facilito_procedure()
BEGIN

  DECLARE var_id INTEGER;
  DECLARE var_paginas INTEGER;
  DECLARE var_titulo VARCHAR(255);
  DECLARE var_final INTEGER DEFAULT 0;

  DECLARE cursor1 CURSOR FOR SELECT libro_id, titulo, paginas FROM libros;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_final = 1;

  OPEN cursor1;

  bucle: LOOP

    FETCH cursor1 INTO var_id, var_titulo, var_paginas;

    IF var_final = 1 THEN
      LEAVE bucle;
    END IF;

    UPDATE libros SET paginas = var_paginas + 10 WHERE libro_id = var_id;

    SELECT
      var_titulo AS  'titulo',
      var_paginas AS 'Anterior',
      paginas AS 'Incremento'
      FROM libros WHERE libro_id = var_id;


  END LOOP bucle;
  CLOSE cursor1;

END//
DELIMITER ;
Dentro del stored procedure lo primero que hacemos es declarar todas las variables que usaremos. En este caso como trabajaremos con el t√≠tulo y el n√∫mero de p√°ginas de cada libro declar√≥ tres nuevas variables. var_id, var_paginas, var_titulo.

Para tener un control sobre la iteraci√≥n de cada uno de los elementos en la consulta declar√≥ una cuarta variable llamada var_final, cuyo valor comienza en 0.

Una vez hemos declarado todas las variables procedemos a crear nuestro cursor. El cursor se crear√° a partir de una consulta SQL. En este caso la consulta no es demasiado compleja, sin embargo, si as√≠ lo deseamos podemos crear un cursos a partir de una consulta con joins, order, group etc...

Con la sentencia

DECLARE CONTINUE HANDLER FOR NOT FOUND SET var_final = 1;
Indicamos que una vez todos los elementos (filas) dentro de nuestro cursor hayan sido iterados la variable var_final tomar√° un nuevo valor, de 0 a 1.

Para comenzar la iteraci√≥n de los elementos ser√° necesario abrir el cursor.

OPEN cursor1;
La iteraci√≥n la logramos utilizando un Loop, el cual ser√° controlado a partir de la variable var_final.

    IF var_final = 1 THEN
            --Si ya no existen m√°s elementos finalizamos el ciclo.
      LEAVE bucle;
    END IF;
Al nosotros usar la cl√°usula Fetch obtenemos el elemento (fila) actual de nuestra consulta y avanzamos al siguiente elemento.

En este caso como en nuestra consulta hemos obtenido 3 columnas (id, titulo, p√°ginas) asignamos el valor de cada una de las columnas a nuestras variables. Es importante mencionar que los valores podr√°n ser asignados √∫nicamente a variables del mismo tipo, no podremos asignar un varchar a una variable de tipo integer.

El orden es importante.

FETCH cursor1 INTO var_id, var_titulo, var_paginas;
Una vez hemos realizado todas las tareas correspondientes y se han iterado todos los elementos (filas) el siguiente paso ser√° cerrar el cursor.

close cursor1
Para ejecutar nuestro stored prcedure ejecutaremos la siguiente sentencia.

call facilito_procedure();




Respaldo de informaci√≥n
RESPALDO DE INFORMACI√ìN
En MySQL nosotros podemos realizar respaldos de nuestra informaci√≥n, para ello, utilizaremos la aplicaci√≥n mysqldump.

Si queremos realizar el respaldo de una sola base de datos ejecutaremos el siguiente comando en nuestra terminal.

mysqldump base_de_datos > ruta/archivo_respaldo.sql
Si lo que necesitamos es realizar el respaldo de m√∫ltiples base de datos, modificaremos nuestro comando, agregando --databases.

mysqldump --databases db1 db2 db3 > ruta/archivo_respaldo.sql
Separaremos las base de datos mediante un espacio.

Si lo que necesitamos es realizar el respaldo de una o m√∫ltiples tablas el comando ser√° el siguiente

Para una sola tabla

mysqldump base_de_datos tabla1 > ruta/archivo_respaldo.sql
Para m√∫ltiples tablas

mysqldump base_de_datos tabla1 tabla3 > ruta/archivo_respaldo.sql




Asignar permisos a usuarios MySQL
C√≥mo mencionamos anteriormente: el servidor de base de datos permite que m√°s de un usuario pueda trabajar con los recursos del servidor (registros, tablas, bases de datos, funciones, etc..).

Hasta este punto del curso, todos los ejercicios los hemos realizado utilizando el usuario root.

Si nosotros somos los √∫nicos administradores del servidor (algo que muy pocas veces sucede) no deber√≠amos tener problemas en seguir utilizando root, sin embargo, si m√°s personas trabajar√°n con el servidor, ser√° necesario que generemos nuevos usuarios y asignemos los permisos pertinentes.

source: imgur.com

AGREGAR NUEVOS USUARIOS
Para que nosotros generemos un nuevo usuario lo primero que debemos de hacer es autenticarnos en el servidor.

mysql -u root -p -h localhost<ip>
Posteriormente debemos de generar un nuevo Usuario, Para esto ejecutamos las siguiente sentencia.

CREATE USER 'usuario'@'localhost' IDENTIFIED BY 'password';
Hasta este punto, nosotros ya podemos autenticarnos con el servidor utilizando el nuevo usuario, sin embargo, una vez autenticado las acciones que podemos hacer son m√≠nimas, debido a que este usuario no posee los permisos necesarios para trabajar con las bases de datos.

ASIGNAR PERMISOS
Para poder establecer permisos, las siguiente sentencias deben de ejecutarse utilizando el usuario root.

Si queremos que el nuevo usuario tenga permisos de administrador (Todos los permisos), debemos de ejecutar la siguiente sentencia.

GRANT ALL PRIVILEGES ON *.* TO 'nombre_usuario'@'localhost';
Los asteriscos indican que los permisos ser√°n asignados a todas las bases de datos y a todas las tablas (primer asteriscos bases de datos, segundo asterisco tablas).

Si queremos asignar permisos para ciertas acciones, la sentencia quedar√≠a de la siguiente manera. Reemplazamos ALL PRIVILEGES y colocamos las acciones que queremos asignar.

GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP
    -> ON codigofacilito.*
    -> TO 'nombre_usuario'@'localhost';
En esta ocasi√≥n estamos indicando que el nuevo usuario podr√° consultar, crear, actualizar y eliminar registros, as√≠ c√≥mo podr√° crear o eliminar elementos (tablas, √≠ndices, columnas, funciones, stores, etc ...).

Todos estos permisos ser√°n v√°lidos √∫nicamente en la base de datos codigofacilito y se aplicar√°n a todas las tablas.

Si queremos asignar permisos √∫nicamente a una tabla, reemplazamos el asteriscos por el nombre de la tabla.

ejemplo codigofacilito.usuarios

Una vez hayamos finalizado con los permisos, el √∫ltimo paso ser√° refrescarlos.

FLUSH PRIVILEGES;
PERMISOS
Aqu√≠ un listado de algunos permisos que podemos asignar.

CREATE permite crear nuevas tablas o bases de datos.
DROP permite eliminar tablas o bases de datos.
DELETE permite eliminar registros de tablas.
INSERT permite insertar registros en tablas.
SELECT permite leer registros en las tablas.
UPDATE permite actualizar registros en las tablas.
GRANT OPTION permite remover permisos de usuarios.
SHOW DATABASE Permite listar las bases de datos existentes.
SENTENCIAS A TENER EN CUENTA
Listado de todos los usuarios.

SELECT User FROM mysql.user;
Eliminar un usuario.

DROP USER 'usuario'@'localhost';
Remover permisos en concreto (Ejemplo update y delete).

REVOKE UPDATE, DELETE ON *.* FROM 'usuario'@'localhost';
Remover todos los privilegios.

REVOKE ALL PRIVILEGES ON *.* FROM 'usuario'@'localhost';



Triggers Mysql
Un trigger, tambi√©n conocido como disparador (Por su traducci√≥n al espa√±ol) es un conjunto de sentencias SQL las cuales se ejecutan de forma autom√°tica cuando ocurre alg√∫n evento que modifique a una tabla. Pero no me refier√≥n a una modificaci√≥n de estructura, no, me refiero a una modificaci√≥n en cuando a los datos almacenados, es decir, cuando se ejecute una sentencia INSERT, UPDATE o DELETE.

A diferencia de una funci√≥n o un store procedure, un trigger no puede existir sin una tabla asociada.

Lo interesante aqu√≠ es que podemos programar los triggers de tal manera que se ejecuten antes o despu√©s, de dichas sentencias; Dando como resultado seis combinaciones de eventos.

BEFORE INSERT Acciones a realizar antes de insertar uno m√°s o registros en una tabla.

AFTER INSERT Acciones a realizar despu√©s de insertar uno m√°s o registros en una tabla.

BEFORE UPDATE Acciones a realizar antes de actualizar uno m√°s o registros en una tabla.

AFTER UPDATE Acciones a realizar despu√©s de actualizar uno m√°s o registros en una tabla.

BEFORE DELETE Acciones a realizar antes de eliminar uno m√°s o registros en una tabla.

AFTER DELETE Acciones a realizar despu√©s de eliminar uno m√°s o registros en una tabla.

A partir de la versi√≥n 5.7.2 de MySQL podemos tener la n cantidad de triggers asociados a una tabla. Anteriormente est√°bamos limitados a tener un m√°ximo de seis trigger por tabla (Uno por cada combinaci√≥n evento).

Podemos ver esto como una relaci√≥n uno a muchos, una tabla puede poseer muchos triggers y un trigger le pertenece √∫nica y exclusivamente a una tabla.

Algo importante a mencionar es que la sentencia TRUNCATE no ejecutar√° un trigger.

VENTAJAS DE UTILIZAR TRIGGERS
Con los triggers seremos capaces validar todos aquellos valores los cuales no pudieron ser validados mediante un constraints, asegurando as√≠ la integreidad de los datos.
Los triggers nos permitir√°n ejecutar reglas de negocios.
Utilizando la combinaci√≥n de eventos nosotros podemos realizar acciones sumamente complejas.
Los trigger nos permitir√°n llevar un control de los cambios realizados en una tabla. Para esto nos debemos de apoyar de una segunda tabla (Com√∫nmente una tabla log).
DESVENTAJAS DE UTILIZAR TRIGGERS
Los triggers al ejecutarse de forma autom√°tica puede dificultar llevar un control sobre qu√© sentencias SQL fueron ejecutadas.
Los triggers incrementa la sobrecarga del servidor. Un mal uso de triggers puede tornarse en respuestas lentas por parte del servidor.












